// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// MCMCsample2
Rcpp::NumericVector MCMCsample2(NumericVector Xv, NumericVector Total, int N, int M, int M1, int K, NumericVector Av, NumericVector Wv, int Mccount, int burnin, NumericVector EqS, NumericVector EqSKappa, NumericVector EqSTau, NumericVector EqKappa, NumericVector EqKappasq, NumericVector EqTau, NumericVector EqTausq, NumericVector EqOmegaKappasq, NumericVector EqOmegaKappaTau, NumericVector EqOmegaTausq);
RcppExport SEXP _iNMF_MCMCsample2(SEXP XvSEXP, SEXP TotalSEXP, SEXP NSEXP, SEXP MSEXP, SEXP M1SEXP, SEXP KSEXP, SEXP AvSEXP, SEXP WvSEXP, SEXP MccountSEXP, SEXP burninSEXP, SEXP EqSSEXP, SEXP EqSKappaSEXP, SEXP EqSTauSEXP, SEXP EqKappaSEXP, SEXP EqKappasqSEXP, SEXP EqTauSEXP, SEXP EqTausqSEXP, SEXP EqOmegaKappasqSEXP, SEXP EqOmegaKappaTauSEXP, SEXP EqOmegaTausqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Xv(XvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Total(TotalSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type M1(M1SEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Av(AvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wv(WvSEXP);
    Rcpp::traits::input_parameter< int >::type Mccount(MccountSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type EqS(EqSSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type EqSKappa(EqSKappaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type EqSTau(EqSTauSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type EqKappa(EqKappaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type EqKappasq(EqKappasqSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type EqTau(EqTauSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type EqTausq(EqTausqSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type EqOmegaKappasq(EqOmegaKappasqSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type EqOmegaKappaTau(EqOmegaKappaTauSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type EqOmegaTausq(EqOmegaTausqSEXP);
    rcpp_result_gen = Rcpp::wrap(MCMCsample2(Xv, Total, N, M, M1, K, Av, Wv, Mccount, burnin, EqS, EqSKappa, EqSTau, EqKappa, EqKappasq, EqTau, EqTausq, EqOmegaKappasq, EqOmegaKappaTau, EqOmegaTausq));
    return rcpp_result_gen;
END_RCPP
}
// MCMCsample2alpha
Rcpp::NumericVector MCMCsample2alpha(NumericVector Xv, NumericVector Total, int N, int M, int M1, int K, NumericVector Av, int updateA, NumericVector Wv, NumericVector alpha, int Mccount, int burnin, NumericVector EqS, NumericVector EqSKappa, NumericVector EqSTau, NumericVector EqKappa, NumericVector EqKappasq, NumericVector EqTau, NumericVector EqTausq, NumericVector EqOmegaKappasq, NumericVector EqOmegaKappaTau, NumericVector EqOmegaTausq);
RcppExport SEXP _iNMF_MCMCsample2alpha(SEXP XvSEXP, SEXP TotalSEXP, SEXP NSEXP, SEXP MSEXP, SEXP M1SEXP, SEXP KSEXP, SEXP AvSEXP, SEXP updateASEXP, SEXP WvSEXP, SEXP alphaSEXP, SEXP MccountSEXP, SEXP burninSEXP, SEXP EqSSEXP, SEXP EqSKappaSEXP, SEXP EqSTauSEXP, SEXP EqKappaSEXP, SEXP EqKappasqSEXP, SEXP EqTauSEXP, SEXP EqTausqSEXP, SEXP EqOmegaKappasqSEXP, SEXP EqOmegaKappaTauSEXP, SEXP EqOmegaTausqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Xv(XvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Total(TotalSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type M1(M1SEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Av(AvSEXP);
    Rcpp::traits::input_parameter< int >::type updateA(updateASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wv(WvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type Mccount(MccountSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type EqS(EqSSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type EqSKappa(EqSKappaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type EqSTau(EqSTauSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type EqKappa(EqKappaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type EqKappasq(EqKappasqSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type EqTau(EqTauSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type EqTausq(EqTausqSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type EqOmegaKappasq(EqOmegaKappasqSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type EqOmegaKappaTau(EqOmegaKappaTauSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type EqOmegaTausq(EqOmegaTausqSEXP);
    rcpp_result_gen = Rcpp::wrap(MCMCsample2alpha(Xv, Total, N, M, M1, K, Av, updateA, Wv, alpha, Mccount, burnin, EqS, EqSKappa, EqSTau, EqKappa, EqKappasq, EqTau, EqTausq, EqOmegaKappasq, EqOmegaKappaTau, EqOmegaTausq));
    return rcpp_result_gen;
END_RCPP
}
// truncatedlikelihoodnoalpha
double truncatedlikelihoodnoalpha(NumericVector Av, NumericVector Wv, NumericVector Xv, NumericVector lambda, int N, int M, int K);
RcppExport SEXP _iNMF_truncatedlikelihoodnoalpha(SEXP AvSEXP, SEXP WvSEXP, SEXP XvSEXP, SEXP lambdaSEXP, SEXP NSEXP, SEXP MSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Av(AvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wv(WvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Xv(XvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(truncatedlikelihoodnoalpha(Av, Wv, Xv, lambda, N, M, K));
    return rcpp_result_gen;
END_RCPP
}
// fitfixedpoint
Rcpp::NumericVector fitfixedpoint(NumericVector Xv, NumericVector lambda, int N, int M, int M1, NumericVector Av, NumericVector Wv, int K);
RcppExport SEXP _iNMF_fitfixedpoint(SEXP XvSEXP, SEXP lambdaSEXP, SEXP NSEXP, SEXP MSEXP, SEXP M1SEXP, SEXP AvSEXP, SEXP WvSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Xv(XvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type M1(M1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Av(AvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wv(WvSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(fitfixedpoint(Xv, lambda, N, M, M1, Av, Wv, K));
    return rcpp_result_gen;
END_RCPP
}
// fitfixedpointAlpha
Rcpp::NumericVector fitfixedpointAlpha(NumericVector Xv, NumericVector lambda, int N, int M, int M1, NumericVector Av, int updateA, NumericVector Wv, int K, NumericVector alpha);
RcppExport SEXP _iNMF_fitfixedpointAlpha(SEXP XvSEXP, SEXP lambdaSEXP, SEXP NSEXP, SEXP MSEXP, SEXP M1SEXP, SEXP AvSEXP, SEXP updateASEXP, SEXP WvSEXP, SEXP KSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Xv(XvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type M1(M1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Av(AvSEXP);
    Rcpp::traits::input_parameter< int >::type updateA(updateASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wv(WvSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(fitfixedpointAlpha(Xv, lambda, N, M, M1, Av, updateA, Wv, K, alpha));
    return rcpp_result_gen;
END_RCPP
}
// Ksphere
NumericVector Ksphere(const int K);
RcppExport SEXP _iNMF_Ksphere(SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(Ksphere(K));
    return rcpp_result_gen;
END_RCPP
}
// c2cpp
NumericVector c2cpp(NumericVector X, int n, int m);
RcppExport SEXP _iNMF_c2cpp(SEXP XSEXP, SEXP nSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(c2cpp(X, n, m));
    return rcpp_result_gen;
END_RCPP
}
// m3tildcpp
NumericVector m3tildcpp(NumericVector X, NumericVector W, NumericVector C2, NumericVector m1, double a0, int n, int m, int p);
RcppExport SEXP _iNMF_m3tildcpp(SEXP XSEXP, SEXP WSEXP, SEXP C2SEXP, SEXP m1SEXP, SEXP a0SEXP, SEXP nSEXP, SEXP mSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type W(WSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type C2(C2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type m1(m1SEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(m3tildcpp(X, W, C2, m1, a0, n, m, p));
    return rcpp_result_gen;
END_RCPP
}
// Npowercpp
NumericVector Npowercpp(int N, NumericVector m3, NumericVector theta, int p);
RcppExport SEXP _iNMF_Npowercpp(SEXP NSEXP, SEXP m3SEXP, SEXP thetaSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type m3(m3SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(Npowercpp(N, m3, theta, p));
    return rcpp_result_gen;
END_RCPP
}
// lambdacpp
double lambdacpp(int p, NumericVector m3, NumericVector theta);
RcppExport SEXP _iNMF_lambdacpp(SEXP pSEXP, SEXP m3SEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type m3(m3SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(lambdacpp(p, m3, theta));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_iNMF_MCMCsample2", (DL_FUNC) &_iNMF_MCMCsample2, 20},
    {"_iNMF_MCMCsample2alpha", (DL_FUNC) &_iNMF_MCMCsample2alpha, 22},
    {"_iNMF_truncatedlikelihoodnoalpha", (DL_FUNC) &_iNMF_truncatedlikelihoodnoalpha, 7},
    {"_iNMF_fitfixedpoint", (DL_FUNC) &_iNMF_fitfixedpoint, 8},
    {"_iNMF_fitfixedpointAlpha", (DL_FUNC) &_iNMF_fitfixedpointAlpha, 10},
    {"_iNMF_Ksphere", (DL_FUNC) &_iNMF_Ksphere, 1},
    {"_iNMF_c2cpp", (DL_FUNC) &_iNMF_c2cpp, 3},
    {"_iNMF_m3tildcpp", (DL_FUNC) &_iNMF_m3tildcpp, 8},
    {"_iNMF_Npowercpp", (DL_FUNC) &_iNMF_Npowercpp, 4},
    {"_iNMF_lambdacpp", (DL_FUNC) &_iNMF_lambdacpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_iNMF(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
